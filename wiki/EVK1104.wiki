= EVK1104 with Bajos =
== General Information ==
The board provides a number of Hardware Features:

    * Hi-Speed USB OTG interface
    * 320 x 240 QVGA TFT LCD
    * Two MMC/ SD card connectors
    * SPI, TWI and USARTs
    * Capacitive Touch interface (12 Buttons)
    * audio connector

== platform classes ==
_`[]` - optional Parameters_

==Display.java==
(Example see javatests/EVK1104a.java)

Can be used for printing on the Display

===attributes===
 * private int xMax (Display width)
 * private int yMax (Display height)
 * private int color, bgColor (default color and default background color)

===methodes===
 * void setColor(int color)
   * sets the color
   * parameter:
     * int color: color, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void setBackgroundColor(int color)
   * sets the background color
   * parameter:
     * int color: color, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void clearDisplay()
   * clears the hole Display (Display has background color after clear)
 
 * void drawPoint(int i, int j `[`, int color`]`)  
      * draw a pixel on the Lcd
      * parameter:
        * int x: horizontal position of the pixel (from left to right 0-320)
        * int y: vertical position of the pixel (from top to bottom 0-240)
        * int color: color of the pixel, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void drawLine(int x1, int y1, int x2, int y3 `[`, int color`]`)  
      * draw a Line on the Lcd
      * parameter:
        * int x1,x2: horizontal position of the start and end point (from left to right 0-320)
        * int y1,y2: vertical position of the start and end point (from top to bottom 0-240)
        * int color: color of the pixel, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void drawVertLine(int x1, int y1, int length `[`, int color`]`)  
      * draw a vetical line on the Lcd
      * parameter:
        * int x1: horizontal position of the start point (from left to right 0-320)
        * int y1: vertical position of the start point (from top to bottom 0-240)
        * int length: length of the line
        * int color: color of the pixel, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void drawHorizLine(int x1, int y1, int length `[`, int color`]`)  
      * draw a horizontal line on the Lcd
      * parameter:
        * int x1: horizontal position of the start point (from left to right 0-320)
        * int y1: vertical position of the start point (from top to bottom 0-240)
        * int length: length of the line
        * int color: color of the pixel, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void drawRect(int x, int y, int width, int height, int linewidth `[`, int color `[`, int bgColor`]]`)  
      * draw a rectangle on the Lcd
      * parameter:
        * int x: horizontal position of the left-top corner (from left to right 0-320)
        * int y: vertical position of of the left-top corner (from top to bottom 0-240)
        * int width: width of the rectangle
        * int height: height of the rectangle
        * int linewidth : width of the rectangle border
        * int color: color of the rectangle border, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
        * int bgColor: fillcolor of the rectangle, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void drawFillRect(int x, int y, int width, int height `[`, int color`]`)  
      * draw a filled rectangle on the Lcd
      * parameter:
        * int x: horizontal position of the left-top corner (from left to right 0-320)
        * int y: vertical position of of the left-top corner (from top to bottom 0-240)
        * int width: width of the rectangle
        * int height: height of the rectangle
        * int color: color of the rectangle, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void drawClearRect(int x, int y, int width, int height)  
      * draw a filled rectangle on the Lcd with background color as color
      * parameter:
        * int x: horizontal position of the left-top corner (from left to right 0-320)
        * int y: vertical position of of the left-top corner (from top to bottom 0-240)
        * int width: width of the rectangle
        * int height: height of the rectangle

 * void drawCircle(int x, int y, int radius, int linewidth `[`, int color `[`, int bgColor`]]`)  
      * draw a circle on the Lcd
      * parameter:
        * int x: horizontal position of the center (from left to right 0-320)
        * int y: vertical position of of the center (from top to bottom 0-240)
        * int radius: radius of the circle
        * int linewidth : width of the circle border
        * int color: color of the circle border, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
        * int bgColor: fillcolor of the circle, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void drawFillCircle(int x, int y, int width, int height `[`, int color`]`) 
      * draw a filled circle on the Lcd
      * parameter:
        * int x: horizontal position of the center (from left to right 0-320)
        * int y: vertical position of of the center (from top to bottom 0-240)
        * int radius: radius of the circle
        * int linewidth : width of the circle border
        * int color: color of the circle, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void drawClearCircle(int x, int y, int width, int height)  
      * draw a filled circle on the Lcd with background color as color
      * parameter:
        * int x: horizontal position of the center (from left to right 0-320)
        * int y: vertical position of of the center (from top to bottom 0-240)
        * int radius: radius of the circle

 * void drawPartialCircle(int x, int y, int radius, int linewidth, int bitmask `[`, int color `[`, int bgColor`]]`)  
      * draw a partial circle on the Lcd
      * parameter:
        * int x: horizontal position of the center (from left to right 0-320)
        * int y: vertical position of of the center (from top to bottom 0-240)
        * int radius: radius of the circle
        * int linewidth : width of the circle border
        * int bitmask: bitmask, which encodes the quadrants, which should be drawn
          * Binary-encoded: 0b 4 4 3 3 2 2 1 1 (quadrants are represented by 2 bits)
          * e.g. 0x0F for the first two quadrants (upper circle) or 0xC0 for the 4th quadrant 
        * int color: color of the circle border, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
        * int bgColor: fillcolor of the circle, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void drawPartialCircle(int x, int y, int radius, int linewidth, boolean`[]` array `[`, int color `[`, int bgColor`]]`)  
      * draw a partial circle on the Lcd
      * parameter:
        * int x: horizontal position of the center (from left to right 0-320)
        * int y: vertical position of of the center (from top to bottom 0-240)
        * int radius: radius of the circle
        * int linewidth : width of the circle border
        * boolean`[]` array: Array with 4 booleans, array`[`0`]`  = quadrant 1, ... , array`[`3`]`  = quadrant 4
        * int color: color of the circle border, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
        * int bgColor: fillcolor of the circle, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void drawPartialFillCircle(int x, int y, int radius, int bitmask `[`, int color `[`, int bgColor`]]`)  
      * draw a partial filled circle on the Lcd
      * parameter:
        * int x: horizontal position of the center (from left to right 0-320)
        * int y: vertical position of of the center (from top to bottom 0-240)
        * int radius: radius of the circle
        * int bitmask: bitmask, which encodes the quadrants, which should be drawn
          * Binary-encoded: 0b 4 4 3 3 2 2 1 1 (quadrants are represented by 2 bits)
          * e.g. 0x0F for the first two quadrants (upper circle) or 0xC0 for the 4th quadrant 
        * int color: color of the circle border, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
        * int bgColor: fillcolor of the circle, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

 * void drawPartialFillCircle(int x, int y, int radius, boolean`[]` array `[`, int color `[`, int bgColor`]]`)  
      * draw a partial filled circle on the Lcd
      * parameter:
        * int x: horizontal position of the center (from left to right 0-320)
        * int y: vertical position of of the center (from top to bottom 0-240)
        * int radius: radius of the circle
        * boolean`[]` array: Array with 4 booleans, array`[`0`]`  = quadrant 1, ... , array`[`3`]`  = quadrant 4
        * int color: color of the circle border, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
        * int bgColor: fillcolor of the circle, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
        
 * void drawString(String string, int font, int x, int y, `[`, int color `[`, int bgColor`]]`)  
      * draw a text on the Lcd
      * parameter:
        * String string: the text as String
        * int font: possible: 1,2 or 3 (1 = smallest, 3 biggest) (Fonts are given by Fontmatrixes at the Display driver)
        * int x: horizontal position of the text (from left to right 0-320)
        * int y: vertical position of of the text (from top to bottom 0-240)
        * int color: color of the text, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
        * int bgColor: color of the text background, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
        
 * void drawChar(char c, int font, int x, int y, `[`, int color `[`, int bgColor`]]`)  
      * draw a character on the Lcd
      * parameter:
        * char c: the character
        * int font: possible: 1,2 or 3 (1 = smallest, 3 biggest) (Fonts are given by Fontmatrixes at the Display driver)
        * int x: horizontal position of the text (from left to right 0-320)
        * int y: vertical position of of the text (from top to bottom 0-240)
        * int color: color of the text, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
        * int bgColor: color of the text background, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
        
 * int arrayToBitmask(boolean`[]` array)  
      * converts a size 4 boolean array to a 4 bit bitmask array`[`0`]`  = bit 0, ..., array`[`3`]`  = bit 3
      * parameter:
        * boolean`[]` array: 

==ADC.java==
(Example see javatests/EVK1104a.java)

  * void enable();
    * enables the ADC
    * parameter:
    
  * void disable();
    * disables the ADC
    * parameter:
    
  * int getValue();
    * returns the ADC value
    * parameter:
    
==LEDs.java==
(Example see javatests/EVK1104a.java)

  * void setLEDs(boolean`[]` led);
    * sets an internal LED array to save a LED status
    * parameter:
      * boolean`[]` led: size 4 booleanarray, led`[`0`]` = LED0, ..., led`[`3`]` = LED3
    
  * void activate();
    * activates the saved LED status
    * parameter:
      * boolean`[]` led: size 4 booleanarray, led`[`0`]` = LED0, ..., led`[`3`]` = LED3
    
  * void activate(boolean`[]` led);
    * activates the given LED status
    * parameter:
    
  * void activate(int i);
    * activates the saved LED status and enables led`[`i`]`
    * parameter:
      * int i: index of the led
    
  * void deactivate(int i);
    * activates the saved LED status and disables led`[`i`]`
    * parameter:
      * int i: index of the led
    
  * void activateBits(int bitmask);
    * activates the given LED status
    * parameter:
        * int bitmask: 4 bit bitmask, bit 0 = LED0, ... , bit 3 = LED3

  * void toggle(int i);
    * toggles led`[i]`
    * parameter:
      * int i: index of the led
    
==Touch.java==
(Example see javatests/EVK1104a.java)

===touchfield indices===
{{{
  6   7   14   15
         0
      13   1
    12      2
  11         3
   10       4
      9    5
         8
}}}
  * boolean isTouched(int i);
    * return true if the given touchfield is touched
    * parameter:
      * int i: index of the touchfield
      
  * boolean`[]` getTouched();
      * return a size 16 array with booleans, array index = button index
      * parameter:


== PlatForm.java ==

=== Generics: ===
  * char nativeCharIn();
    * reads a character from keyboard
  * void nativeCharOut(char c);
    * prints a character at the consol
  * int conStat();
    * returns the status of the consol
  * void exit (int status);
    * exits bajos
  * int currentTimeMillis();
    * returns the runtime in milliseconds

=== LCD-Display ===

  * void initDisplay();
    * initializes the Lcd
    * parameter:

  * void clearDisplay(int color);
    * draws the hole Display in color
    * parameter:
      * int color: color, a bitnumber that holds rgb-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

  * void drawPixel(int x, int y, int color);
    * draw a pixel on the Lcd
    * parameter:
      * int x: horizontal position of the pixel (from left to right 0-320)
      * int y: vertical position of the pixel (from top to bottom 0-240)
      * int color: color, a bitnumber that holds rgb-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

  * void drawHorizLine(int x, int y, int length, int color );
    * draw a horizontal line on the Lcd, beginning at the specified pixel
    * parameter:
      * int x: horizontal position of the fixation-pixel (from left to right 0-320)
      * int y: vertical position od the fixation-pixel (from top to bottom 0-240)
      * int length: lenth of the line (in px)
      * int color: color, a bitnumber that holds rgb-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

  * void drawVertLine(int x, int y, int length, int color);
    * draw a vertical line on the Lcd, beginning at the specified pixel
    * parameter:
      * int x: horizontal position of the fixation-pixel (from left to right 0-320)
      * int y: vertical position od the fixation-pixel (from top to bottom 0-240)
      * int length: lenth of the line (in px)
      * int color: color, a bitnumber that holds rgb-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

  * void drawLine(int x1, int y1, int x2, int y2, int color);
    * draw a line on the Lcd between 2 points
    * parameter:
      * int x1: horizontal position of the starting point (from left to right 0-320)
      * int y1: vertical position od the starting point(from top to bottom 0-240)
      * int x2: horizontal position of the endpoint (from left to right 0-320)
      * int y2: vertical position od the endpoint (from top to bottom 0-240)
      * int color: color, a bitnumber that holds rgb-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

  * void drawFillRect(int x, int y, int width, int height, int color);
    * draw a filled rectangle on the Lcd
    * parameter:
      * int x: horizontal position of the starting point (from left to right 0-320)
      * int y: vertical position od the starting point(from top to bottom 0-240)
      * int width: width of the rectangle
      * int height: height of the rectangle
      * int color: color, a bitnumber that holds rgb-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)

  * void drawFilledCircle(int x, int y, int radius, int color, int quadrants);
    * draw a filled circle on the Lcd
    * parameter:
      * int x: horizontal position of the center (from left to right 0-320)
      * int y: vertical position od the center (from top to bottom 0-240)
      * int radius: radius of the circle
      * int color: color, a bitnumber that holds rgb-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
      * int quadrants: bitmask, which encodes the quadrants, which should be drawn
        * Binary-encoded: 0b 4 4 3 3 2 2 1 1 (quadrants are represented by 2 bits)
        * e.g. 0x0F for the first two quadrants (upper circle) or 0xC0 for the 4th quadrant 
          
  * void drawChar(char c, int font, int x, int y, int color, int bgColor, int index);
    * draw a character on the Lcd
    * parameter:
      * char c: the character
      * int font: (const unsigned char *)&FONTXxX (possible for XxX are 6x8, 8x8, 8x16) (given by the Display driver)
      * int x: horizontal position of the text (from left to right 0-320)
      * int y: vertical position of of the text (from top to bottom 0-240)
      * int color: color of the text, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
      * int bgColor: color of the text background, a bitnumber that holds rgb16-colors (bit 11-15 red, bit 5-10 green, bit 0-4 blue)
      * int index: adjusts the char by a String index (for printing strings)

=== Buttons ===
  * int getButtons();
    * returns a bitmask for of touched touchfields
  * boolean isButtonPressed(int id);
    * returns true if the given field is touched
    * parameter:
      * int id: id of a touchfield (0-15)

=== LEDs ===
  * void setLEDon(int LED);
  * void setLEDoff(int LED);
    
===ADC===
  * void adcInit()
    * initializes the adc
    
  * void adcEnable()
    * enables the adc
    
  * void adcDisable()
    * disables the adc
    
  * int adcGetValue()
    * returns the adc value